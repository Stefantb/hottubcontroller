#------------------------------------------------------------------------------
# 
substitutions:
  unitname: hottubcontroller
  prefix: HTC

  # Inputs
  inp_motor_cold:       GPIO36
  inp_motor_hot:        GPIO39
  inp_kb_on:            GPIO27
  inp_kb_page:          GPIO14
  inp_kb_inc:           GPIO12
  inp_kb_dec:           GPIO13
  inp_sensor_water:     GPIO5
  inp_sensor_hottub:    GPIO32
  inp_sensor_extra:     GPIO33
  inp_sensor_temp_int:  GPIO17
  inp_sensor_hum_int:   GPIO16

  # Outputs
  outp_buzzer:          GPIO19
  outp_led:             GPIO0
  outp_motor_hot:       GPIO25
  outp_motor_cold:      GPIO26
  outp_disp_blank:      GPIO15

  # Other
  spi_clock:            GPIO18
  spi_mosi:             GPIO23
  
  # String definitions
  STR_BTN_ON:                 ${prefix} System ON
  STR_BTN_FLOW_INC:           ${prefix} Increment Flow
  STR_BTN_FLOW_DEC:           ${prefix} Decrement Flow
  STR_BTN_TEMP_INC:           ${prefix} Increment Temperature
  STR_BTN_TEMP_DEC:           ${prefix} Decrement Temperature
  STR_BTN_PID_ATUNE:          ${prefix} PID Autotune

  STR_SENSOR_TAR_FLOW:        ${prefix} Target Flow
  STR_SENSOR_CUR_FLOW:        ${prefix} Current Flow
  STR_SENSOR_HOT_FLOW:        ${prefix} Hot Water Flow
  STR_SENSOR_CLD_FLOW:        ${prefix} Cold Water Flow

  STR_SENSOR_FLOW_SEC:        ${prefix} Flow countdown
  STR_SENSOR_CUR_TEMP:        ${prefix} Current Temperature

  STR_SENSOR_TUB_TEMP1:       ${prefix} Tub Temperature 1
  STR_SENSOR_TUB_TEMP2:       ${prefix} Tub Temperature 2
  STR_SENSOR_TUB_TEMP3:       ${prefix} Tub Temperature 3
  STR_SENSOR_TUB_TEMP4:       ${prefix} Tub Temperature 4
  STR_SENSOR_TUB_TEMP5:       ${prefix} Tub Temperature 5
  STR_SENSOR_TUB_TEMP6:       ${prefix} Tub Temperature 6
  STR_SENSOR_TUB_TEMP7:       ${prefix} Tub Temperature 7
  STR_SENSOR_TUB_TEMP8:       ${prefix} Tub Temperature 8

  STR_SENSOR_MOT_HOT:         ${prefix} Hot Motor Fb Voltage
  STR_SENSOR_MOT_COLD:        ${prefix} Cold Motor Fb Voltage
  
  STR_SENSOR_SEC_SINCE_START: ${prefix} Seconds since startup
  STR_SENSOR_UPTIME:          ${prefix} Uptime
  
  STR_INTERNAL_TEMP:          ${prefix} Internal Temperature
  STR_INTERNAL_HUM:           ${prefix} Internal Humidity

  STR_CLIMATE_PID:            ${prefix} PID Control
  
  STR_UI_FLOW_TIMEOUT:        ${prefix} Flow Timeout
  STR_UI_FLOW_STRENGTH:       ${prefix} Flow strength
  
  
  
  

esphome:
  name: ${unitname}
  platform: ESP32
  board: esp-wrover-kit
#  includes:
#    - display_controller.h

#  libraries:
#    - TFT_eSPI

wifi:
  <<: !include ../wifi.yaml

  ap:
    ssid: "Hottubcontroller"
    password: "xbYrFEfkApV8"

captive_portal:

logger:
  level: INFO

api:
#i2c:
ota:

#web_server:
#  port: 80

globals:
  # Constant
  - id: per2volt
    type: float
    initial_value: '0.0075'

  - id: volt2per
    type: float
    initial_value: '36.635'

  - id: max_temperature
    type: float
    initial_value: '55'

  - id: endtime
    type: float
    initial_value: '0'
    
    # Valid states are: STANDBY, FILLING, MANUAL, DEFREEZING
  - id: state
    type: String
    initial_value: ''


dallas:
  - id: htc_output_temperature
    pin: ${inp_sensor_water}
    update_interval: 1s
#  - id: hottub_temperature
#    pin: ${inp_sensor_hottub}
#    update_interval: 1s

    
output:
  - platform: esp32_dac
    pin: ${outp_motor_hot}
    id: htc_dac_motor_hot

  - platform: esp32_dac
    pin: ${outp_motor_cold}
    id: htc_dac_motor_cold
    
  - platform: gpio
    pin: ${outp_buzzer}
    id: gpio_buzzer

  - platform: gpio
    pin: ${outp_led}
    id: gpio_led

  - platform: template
    type: float
    id: htc_motor_hot
    write_action:
      - lambda: |-
          if (id(htc_pid_ctrl).mode == CLIMATE_MODE_OFF)
            id(htc_dac_motor_hot).set_level(0);
          else {
            if (id(htc_current_temp).state < id(max_temperature)) {
              float y = 0.41 * state + id(htc_flow_strength).state/100;
              if (y > 1) y = 1;
              if (y < 0) y = 0;
              id(htc_dac_motor_hot).set_level(y);
            }
            else {
              ESP_LOGW("custom", "Overheating - cooling triggered");
              id(htc_dac_motor_hot).set_level(0);
              id(htc_dac_motor_cold).set_level(1);
            }
            if (!id(run_timeout).is_running())
              id(run_timeout).execute();
          }

  - platform: template
    type: float
    id: htc_motor_cold
    write_action:
      - lambda: |-
          if (id(htc_pid_ctrl).mode == CLIMATE_MODE_OFF)
            id(htc_dac_motor_cold).set_level(0);
          else {
            if (id(htc_current_temp).state < id(max_temperature)) {
              float y = 0.41 * state + id(htc_flow_strength).state/100;
              if (y > 1) y = 1;
              if (y < 0) y = 0;
              id(htc_dac_motor_cold).set_level(y);
            }
            else {
              ESP_LOGW("custom", "Overheating - cooling triggered");
              id(htc_dac_motor_hot).set_level(0);
              id(htc_dac_motor_cold).set_level(1);
            }
            if (!id(run_timeout).is_running())
              id(run_timeout).execute();
          }
          
switch:
  #-----------------------------------------------------------------------------
  # Temperature control
  - platform: template
    name: ${STR_BTN_PID_ATUNE}
    optimistic: true
    turn_on_action:
      - climate.pid.autotune: htc_pid_ctrl

  #-----------------------------------------------------------------------------
  #
text_sensor:
  - platform: template
    name: ${STR_SENSOR_FLOW_SEC}
    id: htc_flow_countdown_txt
    icon: mdi:clock-start
      
  - platform: template
    name: ${STR_SENSOR_UPTIME}   
    id: htc_uptime_txt
    icon: mdi:clock-start


sensor:
  #-----------------------------------------------------------------------------
  # Target flow
  - platform: template
    id: htc_target_flow_percentge
    name: ${STR_SENSOR_TAR_FLOW}
    unit_of_measurement: '%'
    
  # Current flow  
  - platform: template
    id: htc_current_flow_percentage
    name: ${STR_SENSOR_CUR_FLOW}
    unit_of_measurement: '%'

  # Current hot flow  
  - platform: template
    id: htc_hot_flow_percentage
    name: ${STR_SENSOR_HOT_FLOW}
    unit_of_measurement: '%'

  # Current cold flow  
  - platform: template
    id: htc_cold_flow_percentage
    name: ${STR_SENSOR_CLD_FLOW}
    unit_of_measurement: '%'

  #-----------------------------------------------------------------------------
  # Uptime
  - platform: uptime
    name: ${STR_SENSOR_SEC_SINCE_START}  
    id: htc_uptime_sec
    update_interval: 5s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: htc_flow_countdown_txt
            state: !lambda |-
              if (id(htc_pid_ctrl).mode == CLIMATE_MODE_OFF)
                return "0s";
              else {
                int seconds = round(id(endtime) - id(htc_uptime_sec).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? String(days) + "d " : "") +
                  (hours ? String(hours) + "h " : "") +
                  (minutes ? String(minutes) + "m " : "") +
                  (String(seconds) + "s")
                ).c_str();        
              }
        - text_sensor.template.publish:
            id: htc_uptime_txt
            state: !lambda |-
              int seconds = round(id(htc_uptime_sec).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();        
            

  #-----------------------------------------------------------------------------
  # Dallas temperature sensors
  
  # Output water
  - platform: dallas
    id: htc_current_temp
    dallas_id: htc_output_temperature
    address: 0xA80008039D1DC610
    name: ${STR_SENSOR_CUR_TEMP}

  # Sensor 1 (bottom)
#  - platform: dallas
#    id: htc_tub_temp1
#    dallas_id: hottub_temperature
#    address: 0xA90008039CB95810
#    name: ${STR_SENSOR_TUB_TEMP1}

  # Sensor 2
#  - platform: dallas
#    id: htc_tub_temp2
#    dallas_id: hottub_temperature
#    address: 0xC60008039D02CA10
#    name: ${STR_SENSOR_TUB_TEMP2}

  # Sensor 3
#  - platform: dallas
#    id: htc_tub_temp3
#    dallas_id: hottub_temperature
#    address: 0xC40008039D5DC110
#    name: ${STR_SENSOR_TUB_TEMP3}

  # Sensor 4
#  - platform: dallas
#    id: htc_tub_temp4
#    dallas_id: hottub_temperature
#    address: 0xBF0008039C8B4510
#    name: ${STR_SENSOR_TUB_TEMP4}

  # Sensor 5
#  - platform: dallas
#    id: htc_tub_temp5
#    dallas_id: hottub_temperature
#    address: 0x980008039CA9E510
#    name: ${STR_SENSOR_TUB_TEMP5}

  # Sensor 6
#  - platform: dallas
#    id: htc_tub_temp6
#    dallas_id: hottub_temperature
#    address: 0x940008039D15D510
#    name: ${STR_SENSOR_TUB_TEMP6}

  # Sensor 7
#  - platform: dallas
#    id: htc_tub_temp7
#    dallas_id: hottub_temperature
#    address: 0x5B0008039CBE4310
#    name: ${STR_SENSOR_TUB_TEMP7}

  # Sensor 8 (top)
#  - platform: dallas
#    id: htc_tub_temp8
#    dallas_id: hottub_temperature
#    address: 0xAE0008039D42EB10
#    name: ${STR_SENSOR_TUB_TEMP8}

  #-----------------------------------------------------------------------------
  # Motor control feedback
  - platform: adc
    pin: ${inp_motor_cold}
    name: ${STR_SENSOR_MOT_COLD}
    id: htc_adc_motor_cold
    attenuation: 11db
    update_interval: 1s
    on_value:
      then:
        lambda: |-
          float coldState = id(htc_adc_motor_cold).state/2; 
          id(htc_current_flow_percentage).publish_state((coldState + id(htc_adc_motor_hot).state/2) * id(volt2per));
          id(htc_cold_flow_percentage).publish_state(coldState * id(volt2per));

  - platform: adc
    pin: ${inp_motor_hot}
    name: ${STR_SENSOR_MOT_HOT}
    id: htc_adc_motor_hot
    attenuation: 11db
    update_interval: 1s
    on_value:
      then:
        lambda: |-
          float hotState = id(htc_adc_motor_hot).state/2;
          id(htc_current_flow_percentage).publish_state((id(htc_adc_motor_cold).state/2 + hotState) * id(volt2per));
          id(htc_hot_flow_percentage).publish_state(hotState * id(volt2per));
    

  #-----------------------------------------------------------------------------
  # Inhouse values
  - platform: dht
    pin: ${inp_sensor_hum_int}
    id: board_sensor
    temperature:
      name: ${STR_INTERNAL_TEMP}
      id: inhouse_temperature
    humidity:
      name: ${STR_INTERNAL_HUM}
      id: inhouse_humidity
    update_interval: 10s

  #-----------------------------------------------------------------------------
  # Interface values in homeassistant
  - platform: homeassistant
    name: ${STR_UI_FLOW_TIMEOUT}
    entity_id: input_number.htc_flow_timeout
    id: htc_flow_timeout
    on_value:
      then:
        - lambda: |-
            if (id(htc_pid_ctrl).mode != CLIMATE_MODE_OFF) {
              ESP_LOGI("custom", "Restarting timeout, new time: %.1f minutes", id(htc_flow_timeout).state);
              id(run_timeout).stop();
              id(run_timeout).execute();
            }

  - platform: homeassistant
    name: ${STR_UI_FLOW_STRENGTH}
    entity_id: input_number.htc_flow_strength
    id: htc_flow_strength
    

climate:
  - platform: pid
    name: ${STR_CLIMATE_PID}
    id: htc_pid_ctrl
    sensor: htc_current_temp
    default_target_temperature: 40°C
    heat_output: htc_motor_hot
    cool_output: htc_motor_cold
    control_parameters:
      # b = 70
      kp: 0.08913     # 0.10913
      ki: 0.00398  # 0.00398
      kd: 1.5      # 0.74752

    visual:
      min_temperature: 30 °C
      max_temperature: 47 °C
      temperature_step: 0.1 °C

  
script:
  - id: run_timeout
    mode: restart   
    then:
      - delay: !lambda |-
          ESP_LOGI("custom", "Starting timeout, system ON");
          id(endtime) = id(htc_uptime_sec).raw_state + (id(htc_flow_timeout).state * 60);
          float timeout = (id(htc_flow_timeout).state * 1000 * 60); // Milliseconds 
          ESP_LOGI("custom", "Timeout is: %f", timeout);
          return timeout;
      - lambda: |-
          ESP_LOGI("custom", "Stopping timeout, system OFF");
          id(htc_pid_ctrl).mode = CLIMATE_MODE_OFF; 
          id(endtime) = 0;


      
      
      
      
      
      
      
      
      
      
      