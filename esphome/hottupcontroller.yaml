---
# *****************************************************************************
#
# *****************************************************************************
substitutions:
  unitname: htc2
  prefix: HTC2

  <<: !include ../htc2_pins.yaml
  <<: !include ../htc2_strings.yaml

external_components:
  - source: my_components

esphome:
  name: ${unitname}
  platform: ESP32
  board: esp-wrover-kit

  on_boot:
    - wait_until:
        api.connected:
    - lambda: id(id_stop_climate).execute();

wifi:
  <<: !include ../wifi.yaml

  ap:
    ssid: "Hottubcontroller"
    password: "xbYrFEfkApV8"

captive_portal:

logger:
  level: INFO

api:
ota:

# *****************************************************************************
#
# *****************************************************************************
# Example configuration entry
# web_server:
#   port: 80

# *****************************************************************************
#
# *****************************************************************************
globals:
  # Constants
  - id: volt2per
    type: float
    initial_value: "31.95"
    # ADC reads max 3.13v @ 100% -> 100 / 3.13 =~ 31.95

  - id: endtime
    type: float
    initial_value: "0"

# *****************************************************************************
#
# *****************************************************************************
blender:
  manual_switch: id_manual_control
  defrost_switch: id_defrost
  calibrate_switch: id_calibrate
  pid_controller_in: id_pid_ctrl
  flow_strength_in: id_flow_strength
  hot_valve:
    out_dac: id_da1_motor_hot
    in_adc: id_adc1_motor_hot
    manual_input: id_hot_output_slider
    out_lower_limit: 29
    out_upper_limit: 100
    out_defrost: 30
  cold_valve:
    out_dac: id_da2_motor_cold
    in_adc: id_adc2_motor_cold
    manual_input: id_cold_output_slider
    out_lower_limit: 29
    out_upper_limit: 100

# *****************************************************************************
#
# *****************************************************************************
spi:
  clk_pin: GPIO18
  mosi_pin: GPIO23

dallas:
  - id: id_output_temperature
    pin: ${inp_sensor_1}
    update_interval: 1s

# *****************************************************************************
#
# *****************************************************************************
output:
  - platform: esp32_dac
    pin: ${outp_da1}
    id: id_da1_motor_hot

  - platform: esp32_dac
    pin: ${outp_da2}
    id: id_da2_motor_cold

  - platform: template
    type: float
    id: id_motor_hot
    write_action:
      - lambda: |-
          id(pid_hot_output).publish_state(state*100);
          if (id(id_pid_ctrl).mode != CLIMATE_MODE_OFF)
          {
            float ctrl = state * 100;
            auto call = id(id_ctrl_signale).make_call();
            call.set_value(ctrl);
            call.perform();
          }

  - platform: template
    type: float
    id: id_motor_cold
    write_action:
      - lambda: |-
          id(pid_cold_output).publish_state(state*100);

          if (id(id_pid_ctrl).mode == CLIMATE_MODE_OFF)
          {
            float ctrl = -state * 100;
            auto call = id(id_ctrl_signale).make_call();
            call.set_value(ctrl);
            call.perform();
          }

# *****************************************************************************
#
# *****************************************************************************
switch:
  #-----------------------------------------------------------------------------
  # PID autotune, Kp, Ki and Kd must be set to zero.
  - platform: template
    name: ${STR_BTN_PID_ATUNE}
    optimistic: true
    turn_off_action:
      - climate.pid.autotune: id_pid_ctrl
      - lambda: ESP_LOGI("custom", "Autotune OFF");
    turn_on_action:
      - climate.pid.autotune: id_pid_ctrl
      - lambda: ESP_LOGI("custom", "Autotune ON");

  - platform: gpio
    pin: ${outp_rel1}
    name: ${STR_OUTPUT_REL1}
    id: id_gpio_rel1

  - platform: gpio
    pin: ${outp_rel2}
    name: ${STR_OUTPUT_REL2}
    id: id_gpio_rel2

  - platform: gpio
    pin: ${outp_rel3}
    name: ${STR_OUTPUT_REL3}
    id: id_gpio_rel3

  - platform: gpio
    pin: ${outp_rel4}
    name: ${STR_OUTPUT_REL4}
    id: id_gpio_rel4

  - platform: gpio
    pin: ${outp_rel5}
    name: ${STR_OUTPUT_REL5}
    id: id_gpio_rel5

  - platform: gpio
    pin: ${outp_rel6}
    name: ${STR_OUTPUT_REL6}
    id: id_gpio_rel6

  - platform: template
    name: ${STR_BTN_MANUAL_CTRL}
    id: id_manual_control
    optimistic: true
    turn_off_action:
      - lambda: ESP_LOGI("custom", "Manual OFF");
    turn_on_action:
      - lambda: ESP_LOGI("custom", "Manual ON");

  - platform: template
    name: ${STR_BTN_DEFROST}
    id: id_defrost
    optimistic: true
    # assumed_state: true
    restore_mode: RESTORE_DEFAULT_ON
    turn_off_action:
      - lambda: ESP_LOGI("custom", "Defrost OFF");
    turn_on_action:
      - lambda: ESP_LOGI("custom", "Defrost ON");

  - platform: template
    name: ${STR_BTN_CALIBRATE}
    id: id_calibrate
    optimistic: true
    # assumed_state: true
    restore_mode: RESTORE_DEFAULT_OFF
    turn_off_action:
      - lambda: ESP_LOGI("custom", "Calibrate OFF");
    turn_on_action:
      - lambda: ESP_LOGI("custom", "Calibrate ON");

# *****************************************************************************
#
# *****************************************************************************
text_sensor:
  - platform: template
    name: ${STR_SENSOR_FLOW_SEC}
    id: id_flow_countdown_txt
    icon: mdi:clock-start

  - platform: template
    name: ${STR_SENSOR_UPTIME}
    id: id_uptime_txt
    icon: mdi:clock-start

# *****************************************************************************
#
# *****************************************************************************
sensor:
  - platform: template
    id: pid_hot_output
    name: pid_hot_out

  - platform: template
    id: pid_cold_output
    name: pid_cold_out

  # Current hot flow
  - platform: template
    id: id_hot_flow_percentage
    name: ${STR_SENSOR_HOT_FLOW}
    unit_of_measurement: "%"

  # Current cold flow
  - platform: template
    id: id_cold_flow_percentage
    name: ${STR_SENSOR_CLD_FLOW}
    unit_of_measurement: "%"

  #-----------------------------------------------------------------------------
  # Uptime
  - platform: uptime
    name: ${STR_SENSOR_SEC_SINCE_START}
    id: id_uptime_sec
    update_interval: 5s
    internal: true
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: id_flow_countdown_txt
            state: !lambda |-
              if (id(id_pid_ctrl).mode == CLIMATE_MODE_OFF)
                return "0s";
              else {
                int seconds = round(id(endtime) - id(id_uptime_sec).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? String(days) + "d " : "") +
                  (hours ? String(hours) + "h " : "") +
                  (minutes ? String(minutes) + "m " : "") +
                  (String(seconds) + "s")
                ).c_str();
              }
        - text_sensor.template.publish:
            id: id_uptime_txt
            state: !lambda |-
              int seconds = round(id(id_uptime_sec).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();

  #-----------------------------------------------------------------------------
  # Dallas temperature sensors
  # Output water. Because this sensor is updated every second, this is the best
  # place to check the state.
  - platform: dallas
    id: id_inflow_temp
    dallas_id: id_output_temperature
    address: 0xdb00000de4caef28
    name: ${STR_SENSOR_OUT_TEMP}
    # on_value:
    #   then:
    #     # - display.page.show: valve_opening
    #     - lambda: id(id_check_state).execute();

  #-----------------------------------------------------------------------------
  # Motor control feedback
  - platform: adc
    pin: ${inp_ad1}
    name: ${STR_SENSOR_MOT_HOT}
    id: id_adc1_motor_hot
    attenuation: 11db
    update_interval: 1s
    on_value:
      then:
        lambda: |-
          {
            float hotState = id(id_adc1_motor_hot).state;
            id(id_hot_flow_percentage).publish_state(hotState * id(volt2per));
          }

  - platform: adc
    pin: ${inp_ad2}
    name: ${STR_SENSOR_MOT_COLD}
    id: id_adc2_motor_cold
    attenuation: 11db
    update_interval: 1s
    on_value:
      then:
        lambda: |-
          {
            float coldState = id(id_adc2_motor_cold).state;
            id(id_cold_flow_percentage).publish_state(coldState * id(volt2per));
          }

  #-----------------------------------------------------------------------------
  # Motor control feedback
  - platform: adc
    pin: ${inp_ad3}
    name: ${STR_SENSOR_AD3}
    id: id_adc3
    attenuation: 11db
    update_interval: 1s

  - platform: adc
    pin: ${inp_ad4}
    name: ${STR_SENSOR_AD4}
    id: id_adc4
    attenuation: 11db
    update_interval: 1s

  - platform: pid
    name: "PID heat"
    climate_id: id_pid_ctrl
    type: HEAT

  - platform: pid
    name: "PID cool"
    climate_id: id_pid_ctrl
    type: COOL

  - platform: pid
    name: "PID KI"
    climate_id: id_pid_ctrl
    type: KI

  - platform: pid
    name: "PID KP"
    climate_id: id_pid_ctrl
    type: KP

  - platform: pid
    name: "PID KD"
    climate_id: id_pid_ctrl
    type: KD

# *****************************************************************************
#
# *****************************************************************************
climate:
  - platform: pid
    name: ${STR_CLIMATE_PID}
    id: id_pid_ctrl
    sensor: id_inflow_temp
    default_target_temperature: 40°C
    heat_output: id_motor_hot
    cool_output: id_motor_cold
    control_parameters:
      kp: 0.1342
      ki: 0.00243
      kd: 1.85359
      min_integral: -1
      max_integral: 1
    visual:
      min_temperature: 0 °C
      max_temperature: 65 °C
      temperature_step: 0.5 °C

# *****************************************************************************
#
# *****************************************************************************
script:
  - id: id_stop_climate
    then:
      - lambda: |-
          auto call = id(id_pid_ctrl).make_call();
          call.set_mode("OFF");
          call.perform();

# *****************************************************************************
#
# *****************************************************************************
number:
  - platform: template
    name: hot_output
    id: id_hot_output_slider
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    mode: slider

  - platform: template
    name: cold_output
    id: id_cold_output_slider
    optimistic: true
    min_value: 0
    max_value: 100
    step: 1
    mode: slider

  - platform: template
    name: flow_strength
    id: id_flow_strength
    optimistic: true
    min_value: 0
    max_value: 100
    initial_value: 100
    step: 1
    mode: slider

  - platform: template
    name: ctrl_signal
    id: id_ctrl_signale
    optimistic: true
    min_value: -100
    max_value: 100
    step: 10
    mode: slider
